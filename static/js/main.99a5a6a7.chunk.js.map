{"version":3,"sources":["Three/threeExample.jsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ThreeExample","mountRef","useRef","useEffect","scene","THREE","background","camera","window","innerWidth","innerHeight","renderer","setSize","current","appendChild","domElement","handleResize","aspect","updateProjectionMatrix","render","geometry","material","color","cube","add","directionalLight","position","set","target","directionalLight2","z","animate","requestAnimationFrame","rotation","x","y","mRef","addEventListener","removeChild","removeEventListener","ref","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"4NAoEeA,EAjEM,WACnB,IAAMC,EAAWC,iBAAO,MA6DxB,OA3DAC,qBAAU,WACR,IAAIC,EAAQ,IAAIC,IAChBD,EAAME,WAAa,IAAID,IAAY,SACnC,IAAIE,EAAS,IAAIF,IACf,GACAG,OAAOC,WAAaD,OAAOE,YAC3B,GACA,KAEEC,EAAW,IAAIN,IACnBM,EAASC,QAAQJ,OAAOC,WAAYD,OAAOE,aAE3CT,EAASY,QAAQC,YAAYH,EAASI,YAEtC,IAIMC,EAAe,WACnBL,EAASC,QAAQJ,OAAOC,WAAYD,OAAOE,aAC3CH,EAAOU,OAAST,OAAOC,WAAaD,OAAOE,YAC3CH,EAAOW,yBANPP,EAASQ,OAAOf,EAAOG,IAUrBa,EAAW,IAAIf,IAAkB,EAAG,EAAG,GACvCgB,EAAW,IAAIhB,IAAwB,CAAEiB,MAAO,WAChDC,EAAO,IAAIlB,IAAWe,EAAUC,GACpCjB,EAAMoB,IAAID,GACV,IAAME,EAAmB,IAAIpB,IAAuB,SAAU,GAC9DoB,EAAiBC,SAASC,IAAI,EAAG,GAAI,GACrCF,EAAiBG,OAAOF,SAASC,IAAI,EAAG,EAAG,GAC3CvB,EAAMoB,IAAIC,GACVrB,EAAMoB,IAAIC,EAAiBG,QAC3B,IAAMC,EAAoB,IAAIxB,IAAuB,IAAU,GAC/DwB,EAAkBH,SAASC,KAAK,EAAG,GAAI,GACvCE,EAAkBD,OAAOF,SAASC,IAAI,EAAG,EAAG,GAC5CvB,EAAMoB,IAAIK,GACVzB,EAAMoB,IAAIK,EAAkBD,QAC5BrB,EAAOmB,SAASI,EAAI,GAEN,SAAVC,IACFC,sBAAsBD,GACtBR,EAAKU,SAASC,GAAK,IACnBX,EAAKU,SAASE,GAAK,IACnBxB,EAASQ,OAAOf,EAAOG,GAGzBwB,GACA,IAAIK,EAAOnC,EAASY,QAIpB,OAFAL,OAAO6B,iBAAiB,SAAUrB,GAAc,GAEzC,WACLoB,EAAKE,YAAY3B,EAASI,YAC1BP,OAAO+B,oBAAoB,SAAUvB,MAEtC,IAEI,qBAAKwB,IAAKvC,KCnDJwC,MAXf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,oDACA,cAAC,EAAD,UCMOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASjC,OACP,cAAC,IAAMkC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.99a5a6a7.chunk.js","sourcesContent":["import * as THREE from \"three\";\r\nimport { useRef, useEffect } from \"react\";\r\n\r\nconst ThreeExample = () => {\r\n  const mountRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    var scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(\"black\");\r\n    var camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / window.innerHeight,\r\n      0.1,\r\n      1000\r\n    );\r\n    var renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n    mountRef.current.appendChild(renderer.domElement);\r\n\r\n    const renderScene = () => {\r\n      renderer.render(scene, camera);\r\n    };\r\n\r\n    const handleResize = () => {\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderScene();\r\n    };\r\n\r\n    var geometry = new THREE.BoxGeometry(1, 1, 1);\r\n    var material = new THREE.MeshPhongMaterial({ color: 0xffffff });\r\n    var cube = new THREE.Mesh(geometry, material);\r\n    scene.add(cube);\r\n    const directionalLight = new THREE.DirectionalLight(0xff0000, 1);\r\n    directionalLight.position.set(5, 10, 0);\r\n    directionalLight.target.position.set(0, 0, 0);\r\n    scene.add(directionalLight);\r\n    scene.add(directionalLight.target);\r\n    const directionalLight2 = new THREE.DirectionalLight(0x0000ff, 1);\r\n    directionalLight2.position.set(-5, 10, 0);\r\n    directionalLight2.target.position.set(0, 0, 0);\r\n    scene.add(directionalLight2);\r\n    scene.add(directionalLight2.target);\r\n    camera.position.z = 5;\r\n\r\n    var animate = function () {\r\n      requestAnimationFrame(animate);\r\n      cube.rotation.x += 0.01;\r\n      cube.rotation.y += 0.01;\r\n      renderer.render(scene, camera);\r\n    };\r\n\r\n    animate();\r\n    let mRef = mountRef.current;\r\n\r\n    window.addEventListener(\"resize\", handleResize, false);\r\n\r\n    return () => {\r\n      mRef.removeChild(renderer.domElement);\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n  return <div ref={mountRef} />;\r\n};\r\n\r\nexport default ThreeExample;\r\n","import \"./App.css\";\nimport ThreeExample from \"./Three/threeExample\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Experience the Cube</p>\n        <ThreeExample />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}